decl sort idx
decl type Z : idx
decl type One : idx
decl type Add : (idx -> (idx -> idx))

data List (A : +) (N : idx) =
  | nil() with N = Z
  | cons<M : idx>(A, List A M) with N = (Add M One)

comput Fold (A : +) (B : -) (N : idx) =
  | this.coNil().ret(B)
  | this.coCons<M:idx>(A).ret(Fold A B M) with N = (Add M One)

decl type T : +
decl type U : -

comput Fold_t =
  | this.spec_it<N : idx, K : idx>()
        .ret(Fun (List T N) (Closure Lin (Fold T U (Add N K)) ) -> U)


val fold : Fold_t =
  bind/cc a -> cmd
    stk = this.fix().ret(a)
    val = match this.fix(self).ret(b) -> cmd
      stk = this.ret(b)
      val = match this.spec_it().ret(c) ->
        match this.call(l,f).ret(d) = this.ret(c) in
        l.match
          | nil() ->
            f.Lin().coNil().ret(d)
          | cons(h,t) ->
            val f = match this.Lin().ret(e) -> f.Lin().coCons(h).ret(e) in
            self.unbox(Exp).fix().spec_it().call(t,f).ret(d)
        end
      end
    end
