decl type Char : +
decl val succ : (Fun (Int)-> Thunk Int)

data List (C : +) =
  | nil()
  | cons(C, (List C))

val lz = cons(int(0), cons( int(0), nil() ))

decl val map : (Fun (Closure( Fun(Int) -> Thunk Char),
                     List Int)
                -> Thunk (List Char))
