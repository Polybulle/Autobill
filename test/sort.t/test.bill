decl type int : +
decl type char : +
decl val z : int
decl val succ : (fun (int)-> thunk int)

data list (c : +) =
  case nil()
  case cons(c, (list c))

val lz = cons(z, cons( z, nil() ))

decl val map : (fun (closure(fun(int) -> thunk char), list int) -> thunk (list char))
