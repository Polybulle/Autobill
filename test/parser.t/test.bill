decl sort nat
decl type Zero_t : nat
decl type Test : +
decl type Test : -
type Test : + = Tvar
type Test (A : +) (B : -) (C : -) (D : +) : + = (D E (F G H))
type Test : + = (Closure Exp (Closure Aff (Closure Lin A)))
type Test (A : -) : + = (Unit * (Zero + (Top & (Fun (Bottom) -> A))))
data Test =
  | test(Unit)
comput Test (A : +) (B : -) =
  | this.mycall(A).ret(B)
comput Test (A : +) (B : -) =
  | this.myyes().ret(A)
  | this.myno().ret(B)
cmd test ret a = cmd+ val = v stk = this.ret(a) end
cmd test ret a = v.ret(a)
cmd test ret a = cmd stk = this.ret(a) val = v end
val test : T = x
val test = mycons
val test = mycons(x, y, z)
val test = tupple(left(unit()), right(inj{1,3}(unit())))
val test = box(Exp) (a : T) -> v.ret(a)
val test = box(Exp) a -> v.ret(a)
val test = bind/cc+ (a : T) -> v.ret(a)
val test = bind/cc a -> v.ret(a)
val test = match this.cons(x, y, z).ret(a) -> v.ret(a)
val test = match this.cons(x : T, y : U, z : V).ret(a:W) -> v.ret(a)
val test = match
  | this.cons1(x : T, y : U, z : V).ret(a:W) -> v.ret(a)
  | this.cons2(x : T, y : U, z : V).ret(a:W) -> v.ret(a)
end
cmd test ret a = trace "log" spy = unit() in unit().ret(a)
cmd test ret a : T = cmd val = unit() stk = this.ret(a) end
cmd test ret a = cmd val = GOT_TOP stk = this.GOT_ZERO() end
cmd test ret a = cmd val = unit() stk = this.call(x).yes().no().proj{1,3}().ret(a) end
cmd test ret a = cmd val = unit() stk = this.mycons().ret(a) end
cmd test ret a = cmd val = unit() stk = this.mycons2(x, y, z).ret(a) end
cmd test ret a = cmd val = unit() stk = this.unbox(Lin).ret(a) end
cmd test ret a = cmd val = unit() stk = this.bind x -> v.ret(a) end
cmd test ret a = cmd val = unit() stk = this.bind+ (x : T) -> v.ret(a) end
cmd test ret a = cmd val = unit() stk = this.match cons(x, y, z) -> v.ret(a) end
cmd test ret a = cmd
  val = unit()
  stk = this.match
    | cons1(x : T, y : U, z : V) -> v.ret(a)
    | cons2(x : T, y : U, z : V) -> v.ret(a)
    | x -> x.ret(a)
  end
end
val test = fun (x : T) -> v
val test = box(Lin, v)
cmd test ret a = match cons(x,y,z) = v in v.ret(a)
cmd test ret a = match this.cons(x,y,z).ret(b) = this.ret(a) in v.ret(b)
cmd test ret a = val x = v in x.ret(a)
cmd test ret a = stk b = this.ret(a) in v.ret(b)
