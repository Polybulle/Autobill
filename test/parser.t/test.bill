decl sort nat
decl type zero_t : nat
decl type test : +
decl type test : -
type test : + = tvar
type test (a : +) (b : -) (c : -) (d : +) : + = (d e (f g h))
type test : + = (exp (aff (lin a)))
type test (a : -) : + = (unit * (zero + (top & (fun (bottom)-> a))))
data test =
  case Test(unit)
comput test (a : +) (b : -) =
  case this.Mycall(a).ret(b)
comput test (a : +) (b : -) =
  case this.Myyes().ret(a)
  case this.Myno().ret(b)
cmd test ret a = cmd+ val = v stk = this.ret(a) end
cmd test ret a = v.ret(a)
cmd test ret a = cmd stk = this.ret(a) val = v end
val test : t = x
val test = Mycons
val test = Mycons(x, y, z)
val test = tupple(left(unit()), right(inj(1/3,unit())))
val test = box(exp) (a : t) -> v.ret(a)
val test = box(exp) a -> v.ret(a)
val test = bind/cc+ (a : t) -> v.ret(a)
val test = bind/cc a -> v.ret(a)
val test = match this.Cons(x, y, z).ret(a) -> v.ret(a)
val test = match this.Cons(x : t, y : u, z : v).ret(a:w) -> v.ret(a)
val test = match
  case this.Cons1(x : t, y : u, z : v).ret(a:w) -> v.ret(a)
  case this.Cons2(x : t, y : u, z : v).ret(a:w) -> v.ret(a)
end
cmd test ret a : t = cmd val = unit() stk = this.ret(a) end
cmd test ret a = cmd val = GOT_TOP stk = this.GOT_ZERO() end
cmd test ret a = cmd val = unit() stk = this.call(x).yes().no().proj(1/3).ret(a) end
cmd test ret a = cmd val = unit() stk = this.Mycons.ret(a) end
cmd test ret a = cmd val = unit() stk = this.Mycons2(x, y, z).ret(a) end
cmd test ret a = cmd val = unit() stk = this.unbox(lin).ret(a) end
cmd test ret a = cmd val = unit() stk = this.bind x -> v.ret(a) end
cmd test ret a = cmd val = unit() stk = this.bind+ (x : t) -> v.ret(a) end
cmd test ret a = cmd val = unit() stk = this.match Cons(x, y, z) -> v.ret(a) end
cmd test ret a = cmd val = unit() stk = this.match
  case Cons1(x : t, y : u, z : v) -> v.ret(a)
  case Cons2(x : t, y : u, z : v) -> v.ret(a)
end
end
val test = fun (x : t) -> v
val test = box(lin, v)
cmd test ret a = match Cons(x,y,z) = v in v.ret(a)
cmd test ret a = match stk this.Cons(x,y,z).ret(b) = this.ret(a) in v.ret(b)
cmd test ret a = val x = v in x.ret(a)
cmd test ret a = stk b = this.ret(a) in v.ret(b)
